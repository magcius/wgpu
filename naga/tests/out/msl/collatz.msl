// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct _mslBufferSizes {
    uint size0;
};

typedef uint type_1[1];
struct PrimeIndices {
    type_1 data;
};

uint collatz_iterations(
    uint n_base
) {
    uint n = {};
    uint i = 0u;
    n = n_base;
    while(true) {
        if (n > 1u) {
        } else {
            break;
        }
        {
            if ((n % 2u) == 0u) {
                n = n / 2u;
            } else {
                n = (3u * n) + 1u;
            }
            i = i + 1u;
        }
#define LOOP_IS_BOUNDED { volatile bool unpredictable_break_from_loop = false; if (unpredictable_break_from_loop) break; }
        LOOP_IS_BOUNDED
    }
    return i;
}

struct main_Input {
};
kernel void main_(
  metal::uint3 global_id [[thread_position_in_grid]]
, device PrimeIndices& v_indices [[user(fake0)]]
, constant _mslBufferSizes& _buffer_sizes [[user(fake0)]]
) {
    uint _e10 = collatz_iterations(v_indices.data[global_id.x]);
    v_indices.data[global_id.x] = _e10;
    return;
}
