// language: metal2.3
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct UniformCompatible {
    uint val_u32_;
    int val_i32_;
    float val_f32_;
    char _pad3[4];
    ulong val_u64_;
    char _pad4[8];
    metal::ulong2 val_u64_2_;
    char _pad5[16];
    metal::ulong3 val_u64_3_;
    metal::ulong4 val_u64_4_;
    long val_i64_;
    char _pad8[8];
    metal::long2 val_i64_2_;
    metal::long3 val_i64_3_;
    metal::long4 val_i64_4_;
    ulong final_value;
};
struct type_11 {
    ulong inner[2];
};
struct type_12 {
    long inner[2];
};
struct StorageCompatible {
    type_11 val_u64_array_2_;
    type_12 val_i64_array_2_;
};
constant ulong constant_variable = 20uL;

long int64_function(
    long x,
    constant UniformCompatible& input_uniform,
    device UniformCompatible const& input_storage,
    device StorageCompatible const& input_arrays,
    device UniformCompatible& output,
    device StorageCompatible& output_arrays
) {
    long val = 20L;
    val = val + (31L - 1002003004005006L);
    val = val + (val + 5L);
    val = val + static_cast<long>(input_uniform.val_u32_ + static_cast<uint>(val));
    val = val + static_cast<long>(input_uniform.val_i32_ + static_cast<int>(val));
    val = val + static_cast<long>(input_uniform.val_f32_ + static_cast<float>(val));
    val = val + metal::long3(input_uniform.val_i64_).z;
    val = val + as_type<long>(input_uniform.val_u64_);
    val = val + as_type<metal::long2>(input_uniform.val_u64_2_).y;
    val = val + as_type<metal::long3>(input_uniform.val_u64_3_).z;
    val = val + as_type<metal::long4>(input_uniform.val_u64_4_).w;
    output.val_i64_ = input_uniform.val_i64_ + input_storage.val_i64_;
    output.val_i64_2_ = input_uniform.val_i64_2_ + input_storage.val_i64_2_;
    output.val_i64_3_ = input_uniform.val_i64_3_ + input_storage.val_i64_3_;
    output.val_i64_4_ = input_uniform.val_i64_4_ + input_storage.val_i64_4_;
    output_arrays.val_i64_array_2_ = input_arrays.val_i64_array_2_;
    val = val + metal::abs(val);
    val = val + metal::clamp(val, val, val);
    metal::long2 _e126 = metal::long2(val);
    metal::long2 _e128 = metal::long2(val);
    val = val + ( + _e126.x * _e128.x + _e126.y * _e128.y);
    val = val + metal::max(val, val);
    val = val + metal::min(val, val);
    long _e142 = val;
    val = val + metal::select(metal::select(-1, 1, (_e142 > 0)), 0, (_e142 == 0));
    return val;
}

ulong uint64_function(
    ulong x_1,
    constant UniformCompatible& input_uniform,
    device UniformCompatible const& input_storage,
    device StorageCompatible const& input_arrays,
    device UniformCompatible& output,
    device StorageCompatible& output_arrays
) {
    ulong val_1 = 20uL;
    val_1 = val_1 + (31uL + 1002003004005006uL);
    val_1 = val_1 + (val_1 + 5uL);
    val_1 = val_1 + static_cast<ulong>(input_uniform.val_u32_ + static_cast<uint>(val_1));
    val_1 = val_1 + static_cast<ulong>(input_uniform.val_i32_ + static_cast<int>(val_1));
    val_1 = val_1 + static_cast<ulong>(input_uniform.val_f32_ + static_cast<float>(val_1));
    val_1 = val_1 + metal::ulong3(input_uniform.val_u64_).z;
    val_1 = val_1 + as_type<ulong>(input_uniform.val_i64_);
    val_1 = val_1 + as_type<metal::ulong2>(input_uniform.val_i64_2_).y;
    val_1 = val_1 + as_type<metal::ulong3>(input_uniform.val_i64_3_).z;
    val_1 = val_1 + as_type<metal::ulong4>(input_uniform.val_i64_4_).w;
    output.val_u64_ = input_uniform.val_u64_ + input_storage.val_u64_;
    output.val_u64_2_ = input_uniform.val_u64_2_ + input_storage.val_u64_2_;
    output.val_u64_3_ = input_uniform.val_u64_3_ + input_storage.val_u64_3_;
    output.val_u64_4_ = input_uniform.val_u64_4_ + input_storage.val_u64_4_;
    output_arrays.val_u64_array_2_ = input_arrays.val_u64_array_2_;
    val_1 = val_1 + metal::abs(val_1);
    val_1 = val_1 + metal::clamp(val_1, val_1, val_1);
    metal::ulong2 _e126 = metal::ulong2(val_1);
    metal::ulong2 _e128 = metal::ulong2(val_1);
    val_1 = val_1 + ( + _e126.x * _e128.x + _e126.y * _e128.y);
    val_1 = val_1 + metal::max(val_1, val_1);
    val_1 = val_1 + metal::min(val_1, val_1);
    return val_1;
}

kernel void main_(
  constant UniformCompatible& input_uniform [[user(fake0)]]
, device UniformCompatible const& input_storage [[user(fake0)]]
, device StorageCompatible const& input_arrays [[user(fake0)]]
, device UniformCompatible& output [[user(fake0)]]
, device StorageCompatible& output_arrays [[user(fake0)]]
) {
    ulong _e3 = uint64_function(67uL, input_uniform, input_storage, input_arrays, output, output_arrays);
    long _e5 = int64_function(60L, input_uniform, input_storage, input_arrays, output, output_arrays);
    output.final_value = _e3 + as_type<ulong>(_e5);
    return;
}
